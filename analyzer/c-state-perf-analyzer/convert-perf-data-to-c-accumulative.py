# perf script event handlers, generated by perf script -g python
# Licensed under the terms of the GNU GPL License version 2

# The common_* event handler fields are the most useful fields common to
# all events.  They don't necessarily correspond to the 'common_*' fields
# in the format files.  Those fields not available as handler params can
# be retrieved using Python functions of the form common_*(context).
# See the perf-script-python Documentation for the list of available functions.

from __future__ import print_function

import os
import sys
import pprint
import json

sys.path.append(os.environ['PERF_EXEC_PATH'] + \
	'/scripts/python/Perf-Trace-Util/lib/Perf/Trace')

from perf_trace_context import *
from Core import *

db = dict()

def trace_begin():
    pass

def c_lookup(key):
    d = {
        "0" : "POLL",
        "1" : "C1E",
        "2" : "C6",
        "3" : "C8",
        "4" : "C10",
        "4294967295" : "Running"
    }
    return d[str(key)]

# for nane correlation
# grep . /sys/devices/system/cpu/cpu4/cpuidle/state*/{name,time} | sort -n
def trace_end():
    state_duration = dict()
    for cpu, cpu_data in db.items():
        last_time = None; last_state = None
        for time, state in cpu_data:
            state = c_lookup(state)
            if not last_time:
                last_time = time
                last_state = state
                continue
            delta = time - last_time
            if last_state not in state_duration:
                state_duration[last_state] = 0.
            state_duration[last_state] += delta
            last_time = time
            last_state = state
    print(json.dumps(state_duration))

def power__cpu_idle(event_name, context, common_cpu,
        common_secs, common_nsecs, common_pid, common_comm,
        common_callchain, state, cpu_id, perf_sample_dict):
    global db
    time = get_time(common_secs, common_nsecs)
    if not cpu_id in db:
        db[cpu_id] = list()
    db[cpu_id].append([time, state])

def trace_unhandled(event_name, context, event_fields_dict, perf_sample_dict):
    pass

def get_time(sec, nsec):
    return float(sec) + nsec / 1e9


def get_dict_as_string(a_dict, delimiter=' '):
    return delimiter.join(['%s=%s'%(k,str(v))for k,v in sorted(a_dict.items())])
